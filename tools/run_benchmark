set -x
function run
{
	perl tools/benchmark.pl $*
}

# GOALS:
# 1. compare the performance of PDL::NDBin with competing libraries for the
#    construction of a one- and two-dimensional histogram
# 2. show that PDL::NDBin scales well for the large data files it was designed for
#    a. show how libraries scale with data size
#    b. show how libraries scale with number of bins (a high number of bins is
#       sometimes useful, think of lat/lon binning per 5 degrees = 2592 bins! per
#       1 degree = 64800 bins!)
# 3. show the difference between action subs and XS-optimized action classes

# basic one-dimensional histogram
run -b10     -i1500 -f count,want,selection,ndbinning,hist,histogram,MH,MSHXS,MGH tools/lib/nosync/data_66k.nc
run -b10     -i50   -f count,want,selection,ndbinning,hist,histogram,MH,MSHXS,MGH tools/lib/nosync/data_2M.nc
# run on the largest data file, but exclude the slowest methods, and the
# methods which consume a lot of memory (MH, MSHXS, and MGH, due to conversion
# to Perl arrays being required)
run -b10     -i5    -f count,hist,histogram tools/lib/nosync/data_33M.nc
# same, but with higher bin counts
run -b50     -i1500 -f count,want,selection,ndbinning,hist,histogram,MH,MSHXS,MGH tools/lib/nosync/data_66k.nc
run -b50     -i50   -f count,want,selection,ndbinning,hist,histogram,MH,MSHXS,MGH tools/lib/nosync/data_2M.nc
run -b50     -i5    -f count,hist,histogram tools/lib/nosync/data_33M.nc
run -b100    -i1500 -f count,want,selection,ndbinning,hist,histogram,MH,MSHXS,MGH tools/lib/nosync/data_66k.nc
run -b100    -i50   -f count,hist,histogram,MH,MSHXS,MGH tools/lib/nosync/data_2M.nc
run -b100    -i5    -f count,hist,histogram tools/lib/nosync/data_33M.nc
# in tests with 1000 bins, leave out hist() as there is a problem with the
# determination of the number of bins: due to round-off in the calculation of
# the number of bins based on the step size, hist() uses only 999 bins, making
# the comparisons fail
run -b1000   -i1500 -f count,ndbinning,histogram,MH,MSHXS tools/lib/nosync/data_66k.nc
run -b1000   -i50   -f count,histogram,MH,MSHXS tools/lib/nosync/data_2M.nc
run -b1000   -i5    -f count,histogram tools/lib/nosync/data_33M.nc
# MH doesn't like 10000 or more bins (segfaults), so it is excluded from the list
run -b10000  -i1500 -f count,ndbinning,hist,histogram,MSHXS tools/lib/nosync/data_66k.nc
run -b10000  -i50   -f count,hist,histogram,MSHXS tools/lib/nosync/data_2M.nc
run -b10000  -i5    -f count,hist,histogram tools/lib/nosync/data_33M.nc
run -b100000 -i1500 -f count,ndbinning,hist,histogram,MSHXS tools/lib/nosync/data_66k.nc
run -b100000 -i50   -f count,hist,histogram,MSHXS tools/lib/nosync/data_2M.nc
run -b100000 -i5    -f count,hist,histogram tools/lib/nosync/data_33M.nc

# basic two-dimensional histogram
run -b10     -i1500 -f count2d,want2d,ndbinning2d,histogram2d,MH2d,MGH2d tools/lib/nosync/data_66k.nc
run -b10     -i50   -f count2d,want2d,ndbinning2d,histogram2d,MH2d,MGH2d tools/lib/nosync/data_2M.nc
run -b10     -i5    -f count2d,histogram2d tools/lib/nosync/data_33M.nc

# run on multiple files
run -b50     -i5    -f count_multi,histogram_multi -m tools/lib/nosync/multi/*.nc

# show the performance difference between coderefs and XS-optimized classes
run -b10     -i1500 -f coderef,class tools/lib/nosync/data_66k.nc
run -b10     -i50   -f coderef,class tools/lib/nosync/data_2M.nc
run -b10     -i5    -f coderef,class tools/lib/nosync/data_33M.nc

# expose performance hit with old flattening with large bin numbers
#run -b20     -i50   -f count,histogram --old-flattening tools/lib/nosync/data_2M.nc
#run -b40     -i50   -f count,histogram --old-flattening tools/lib/nosync/data_2M.nc

# vim:set filetype=sh:
